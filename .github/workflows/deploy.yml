# This is the name of your CI/CD pipeline
name: Deploy Work Radar to Hostinger

# This section defines the trigger for the pipeline.
# It will run ONLY when you push code to the "main" branch.
on:
  push:
    branches:
      - main

# This section defines the jobs to be run. We only have one job: "deploy".
jobs:
  deploy:
    # The job will run on the latest version of Ubuntu provided by GitHub Actions.
    runs-on: ubuntu-latest

    # These are the individual steps the job will execute in order.
    steps:
      # Step 1: Check out your repository code from GitHub
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js on the GitHub Runner
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20' # Use a modern LTS version of Node.js

      # Step 3: Install frontend dependencies and build the static files
      - name: Install Frontend Dependencies & Build
        # Use working-directory, which is a cleaner way to run commands in a subfolder
        working-directory: ./client
        run: |
          echo "--- Installing client dependencies ---"
          npm ci
          echo "--- Building client files (for /workradar/ base path) ---"
          npm run build

      # Step 4: Securely copy the necessary files to your Hostinger server
      - name: Deploy to Hostinger
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # This copies the built client/dist folder and the server folder
          source: "client/dist, server"
          target: ${{ secrets.PROJECT_PATH }}
          # [CORRECTION] Removed 'strip_components: 1' as it's not a valid
          # parameter for scp-action and could cause errors.
          # [IMPROVEMENT] Added 'rm: true' to clear old files from the 
          # 'dist' and 'server' folders before copying new ones.
          rm: true

      # Step 5: Run final commands on the server to launch the update
      - name: Install Dependencies and Restart Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # This script is perfect. It correctly sources nvm,
          # installs dependencies, and does a zero-downtime reload.
          script: |
            # Source NVM to load Node.js, npm, and pm2 into the environment
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            
            echo "--- Navigating to project directory on server ---"
            cd ${{ secrets.PROJECT_PATH }}/server
            
            echo "--- Installing backend dependencies ---"
            npm ci --production
            
            echo "--- Reloading application with PM2 for zero downtime ---"
            # This 'reload' command is what gives you zero-downtime deployments.
            # It will not interrupt Horilla or your other site.
            pm2 reload work-radar-api
            
            echo "--- Deployment Complete ---"
